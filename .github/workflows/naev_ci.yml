on: [push, pull_request]

name: CI

env:
  DESTDIR: "${{ github.workspace }}/dist/"

jobs:
  "Package_Source":
    runs-on: ubuntu-latest
    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604

    steps:
    - name: Checkout Naev Repository
      uses: actions/checkout@v2
      with:
        path: source
        fetch-depth: 0

    - name:  Package Meson Dist
      run: |
        meson setup build source -Dexecutable=disabled -Ddocs_c=disabled -Ddocs_lua=disabled
        meson dist -C build --no-tests --include-subprojects

    - name: Package Autotools Dist
      run: |
          ./autogen.sh
          ./configure
          make dist-gzip
      working-directory: "source"

    - name: Upload Meson Dist Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-meson-dist-${{ github.sha }}
        path: ${{ github.workspace }}/build/meson-dist/*

    - name: Upload Autotools Dist Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-autotools-dist-${{ github.sha }}
        path: ${{ github.workspace }}/source/naev-*.tar.gz
        if-no-files-found: error

  "Meson_Compile_Naev":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604
            config: linux_clang.ini

          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1804
            config: linux_clang.ini
           
          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu2004
            config: linux_clang.ini

          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu2010
            config: linux_clang.ini

    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.image }}

    steps:
    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naev-meson-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naev-*.tar.xz -C source --strip 1

    - name: Meson Setup
      id: setup
      run: |
        meson setup build source \
            --native-file='source/utils/build/${{ matrix.config }}' \
            --buildtype=release \
            -Db_lto=true \
            -Dauto_features=enabled \
            -Ddocs_c=disabled \
            -Ddocs_lua=disabled

    - name: Upload Setup Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || steps.setup.outcome == 'failure' }}
      with:
        name: ${{ matrix.os }}-meson-${{ github.sha }}-setup-log
        path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

    - name: Meson Compile
      id: compile
      run: |
        meson compile -C build

    - name: Upload Compile Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || steps.compile.outcome == 'failure' }}
      with:
        name: ${{ matrix.os }}-meson-${{ github.sha }}-compile-log
        path: ${{ github.workspace }}/build/meson-logs/meson-log.txt
        if-no-files-found: ignore

    - name: Package
      run: |
        sh $MESON install -C build
        tar -cf naev-meson-${{ matrix.os }}-${{ github.sha }}.tar dist

    - name: Meson Test
      id: tests
      run: |
        ${{ matrix.test-env }} meson test -C build --print-errorlogs

    - name: Upload test log
      uses: actions/upload-artifact@v2
      if: ${{ success() || steps.tests.outcome == 'failure' }}
      with:
        name: ${{ matrix.os }}-${{ github.sha }}-test-log
        path: ${{ github.workspace }}/build/meson-logs/testlog.txt

    - name: Package
      run: |
        meson install -C build
        tar -cvf naev-${{ matrix.os }}-${{ github.sha }}.tar dist
      if: ${{ success() || steps.tests.outcome == 'failure' }}

    - name: Upload Meson Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-${{ matrix.os }}-meson-${{ github.sha }}
        path: "${{ github.workspace }}/*.tar"
        if-no-files-found: error

  "Autotools_Compile_Naev":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604
            config: linux_clang.ini

          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1804
            config: linux_clang.ini
           
          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu2004
            config: linux_clang.ini

          - os: ubuntu-latest
            image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu2010
            config: linux_clang.ini

    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.image }}

    steps:
    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naev-autotools-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naev-*.tar.gz -C source --strip 1

    - name: Autotools Setup
      run: |
        ./configure
      working-directory: source

    - name: Autotools Compile
      run: |
        make -j"$(nproc)"
      working-directory: source

    - name: Autotools Package
      run: |
        pushd source
        make install
        popd
        tar -cf naev-${{ matrix.os }}-autotools-${{ github.sha }}.tar dist

    - name: Upload Autotools Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-${{ matrix.os }}-autotools-${{ github.sha }}
        path: "${{ github.workspace }}/*.tar"
        if-no-files-found: error

  "AppImage_Compile_Naev":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            buildtype: meson
            
          - os: ubuntu-latest
            buildtype: autotools

    runs-on: ${{ matrix.os }}
    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604
      
    steps:
    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naev-meson-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naev-*.tar.xz -C source --strip 1

    - name: Compile AppImage Autotools
      if: ${{ matrix.buildtype == 'autotools' }}
      id: autotoolsCompile
      run: |
        ./source/utils/buildAppImage.sh -s "source" -b "source" -o "${{ env.DESTDIR }}" |& tee -a appImageBuildLog.txt

    - name: Compile AppImage Meson
      if: ${{ matrix.buildtype == 'meson' }}
      id: mesonCompile
      run: |
        ./source/utils/buildAppImage.sh -m -s "source" -b "build" -o "${{ env.DESTDIR }}" |& tee -a appImageBuildLog.txt

    - name: Upload Compile Log
      uses: actions/upload-artifact@v2
      if: ${{ (success() || steps.mesonCompile.outcome == 'failure' || steps.autotoolsCompile.outcome == 'failure') }}
      with:
        name: ${{ matrix.os }}-${{ github.sha }}-${{ matrix.buildtype }}AppImageBuild-log
        path: ${{ github.workspace }}/appImageBuildLog.txt
        if-no-files-found: ignore

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-${{ matrix.os }}-${{ matrix.buildtype }}AppImage-${{ github.sha }}
        path: "${{ env.DESTDIR }}/out/*.AppImage"
        if-no-files-found: error

  "Documentation":
    runs-on: ubuntu-latest
    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604
    needs: "Package_Source"

    steps:
    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naev-meson-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naev-*.tar.xz -C source --strip 1
        
    - name: Meson Build
      run: |
        meson setup build source \
            -Dexecutable=disabled
             
    - name: Package
      run: |
        sh $MESON install -C build
        tar -cf ${{ github.workspace }}/naev-docs-${{ github.sha }}.tar ${{ env.DESTDIR }}/usr/local/doc/naev
        
    - name: Upload Lua Documentation
      if: ${{ github.event_name == 'push' && github.repository == 'naev/naev' }}
      run: |
        curl -X POST https://api.github.com/repos/naev/naev.github.io/dispatches \
        -H 'Accept: application/vnd.github.everest-preview+json' \
        -u ${{ secrets.WEBSITE_ACCESS_TOKEN }} \
        --data '{"event_type": "api", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'" }}'

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-docs-${{ github.sha }}
        path: ${{ github.workspace }}/*.tar
